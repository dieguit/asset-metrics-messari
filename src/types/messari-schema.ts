/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/markets": {
    /** Get the list of all exchanges and pairs that our WebSocket-based market real-time market data API supports. */
    get: operations["Get all Markets"];
  };
  "/api/v1/assets": {
    /**
     * Get the paginated list of all assets *and* their metrics and profiles.
     *
     * Some example query param usage:
     *
     * * optionally use `?fields` query param to pare down the returned fields (because this endpoint returns a lot of data)
     *   * [`data.messari.io/api/v1/assets?fields=id,slug,symbol,metrics/market_data/price_usd`](https://data.messari.io/api/v1/assets?fields=id,slug,symbol,metrics/market_data/price_usd)
     * * optionally use `?with-metrics` or `?with-profiles` query parameters to filter the list
     *   * [`data.messari.io/api/v1/assets?with-metrics`](https://data.messari.io/api/v1/assets?with-metrics)
     *   * [`data.messari.io/api/v1/assets?with-profiles`](https://data.messari.io/api/v1/assets?with-profiles)
     *   * [`data.messari.io/api/v1/assets?with-metrics&with-profiles`](https://data.messari.io/api/v1/assets?with-metrics&with-profiles)
     */
    get: operations["Get all Assets"];
  };
  "/api/v2/assets": {
    /**
     * Get the paginated list of all assets *and* their metrics and profiles.
     *
     * Some example query param usage:
     *
     * * optionally use `?fields` query param to pare down the returned fields (because this endpoint returns a lot of data)
     *   * [`data.messari.io/api/v2/assets?fields=id,slug,symbol,metrics/market_data/price_usd`](https://data.messari.io/api/v2/assets?fields=id,slug,symbol,metrics/market_data/price_usd)
     * * optionally use `?with-metrics` or `?with-profiles` query parameters to filter the list
     *   * [`data.messari.io/api/v2/assets?with-metrics`](https://data.messari.io/api/v2/assets?with-metrics)
     *   * [`data.messari.io/api/v2/assets?with-profiles`](https://data.messari.io/api/v2/assets?with-profiles)
     *   * [`data.messari.io/api/v2/assets?with-metrics&with-profiles`](https://data.messari.io/api/v2/assets?with-metrics&with-profiles)
     */
    get: operations["Get all Assets V2"];
  };
  "/api/v1/assets/{assetKey}": {
    /** Get basic metadata for an asset. */
    get: operations["Get Asset"];
  };
  "/api/v1/assets/{assetKey}/profile": {
    /** Get all of our qualitative information for an asset. */
    get: operations["Get Asset Profile V1"];
  };
  "/api/v2/assets/{assetKey}/profile": {
    /**
     * Get all of our qualitative information for an asset.
     *
     * Some example query param usage:
     *
     * * optionally use `?fields` query param to pare down the returned fields
     *   * [`data.messari.io/api/v2/assets/eth/profile?fields=id,name,profile/general/overview/is_verified`](https://data.messari.io/api/v2/assets/eth/profile?fields=id,name,profile/general/overview/is_verified)
     * * optionally use `?as-markdown` query param to get content in markdown format
     *   * [`data.messari.io/api/v2/assets/btc/profile?as-markdown`](https://data.messari.io/api/v2/assets/btc/profile?as-markdown)
     */
    get: operations["Get Asset Profile V2"];
  };
  "/api/v1/assets/{assetKey}/metrics": {
    /** Get all of our quantitative metrics for an asset. */
    get: operations["Get Asset Metrics"];
  };
  "/api/v1/assets/{assetKey}/metrics/market-data": {
    /** Get the latest market data for an asset. This data is also included in the metrics endpoint, but if all you need is market-data, use this. */
    get: operations["Get Asset Market Data"];
  };
  "/api/v1/news": {
    /**
     * Get the latest (paginated) news and analysis for all assets.
     *
     * Some example query param usage:
     *
     * * optionally use `?fields` query param to pare down the returned fields
     *   * [`data.messari.io/api/v1/news?fields=title,content,author/name`](https://data.messari.io/api/v1/news?fields=title,content,author/name)
     * * optionally use `?as-markdown` to get news formatted in markdown
     *   * [data.messari.io/api/v1/news?as-markdown](https://data.messari.io/api/v1/news?as-markdown)
     */
    get: operations["Get all News"];
  };
  "/api/v1/news/{assetKey}": {
    /**
     * Get the latest (paginated) news and analysis for an asset.
     *
     * Some example query param usage:
     *
     * * optionally use `?fields` query param to pare down the returned fields
     *   * [`data.messari.io/api/v1/news?fields=title,content,author/name`](https://data.messari.io/api/v1/news?fields=title,content,author/name)
     * * optionally use `?as-markdown` to get news formatted in markdown
     *   * [data.messari.io/api/v1/news/btc?as-markdown](https://data.messari.io/api/v1/news/btc?as-markdown)
     */
    get: operations["Get News for Asset"];
  };
  "/api/v1/assets/metrics": {
    /** Lists all of the available timeseries metric IDs for assets. */
    get: operations["List asset timeseries metric IDs"];
  };
  "/api/v1/assets/{assetKey}/metrics/{metricID}/time-series": {
    /**
     * Retrieve historical timeseries data for an asset.
     *
     * metricID specifies which timeseries will be returned. The list of supported metric ids can be found at https://data.messari.io/api/v1/assets/metrics.
     *
     * You can specify the range of what points will be returned using (begin, end, start, before, after) query parameters. All range parameters are inclusive of the specified date.
     *
     * Some examples:
     * * Return data between 2019-01-01 to 2019-01-07: "?start=2020-01-01&end=2020-01-07"
     * * Return data after 2020-01-01: "?after=2020-01-01"
     * * Return data before 2020-01-01: "?before=2020"
     *
     * You can specify the interval that the points will be returned in using the "interval" query parameter. Supported intervals are ["5m", "15m", "30m", "1h", "1d", "1w"] for 5 minute, 15 minute, 30 minute. 1 hour, 1 day, and 1 week respectively. **Anything under 1 day requires an enterprise subscription, please email enterprise@messari.io.**
     *
     * A default start date, end date, and/or interval will be provided for you if not specified.
     *
     * For any given interval, at most 2016 points will be returned. For example, with interval=5m, the maximum range of the request is 2016 * 5 minutes = 7 days. With interval=1h, the maximum range is 2016 * 1 hour = 84 days. Exceeding the maximum range will result in an error, which can be solved by reducing the date range specified in the request.
     *
     * You can specify the sort order of data points in the response using the ?order query parameter. Supported values are "asc" and "desc".
     *
     * You can specify the format of the response using the "format" query parameter. Supported formats are "json" and "csv"
     */
    get: operations["Get Asset timeseries"];
  };
  "/api/v1/markets/{marketKey}/metrics/{metricID}/time-series": {
    /**
     * Retrieve historical timeseries data for a market.
     *
     * metricID specifies which timeseries will be returned. Supported metric IDs are "price", "price-usd", and "real-vol".
     *
     * You can specify the range of what points will be returned using (begin, end, start, before, after) query parameters. All range parameters are inclusive of the specified date.
     *
     * Some examples:
     * * Return data between 2019-01-01 to 2019-01-07: "?start=2020-01-01&end=2020-01-07"
     * * Return data after 2020-01-01: "?after=2020-01-01"
     * * Return data before 2020-01-01: "?before=2020"
     *
     * You can specify the interval that the points will be returned in using the "interval" query parameter. Supported intervals are ["5m", "15m", "30m", "1h", "1d", "1w"] for 5 minute, 15 minute, 30 minute. 1 hour, 1 day, and 1 week respectively. **Anything under 1 day requires an enterprise subscription, please email enterprise@messari.io.**
     *
     * A default start date, end date, and/or interval will be provided for you if not specified.
     *
     * For any given interval, at most 2016 points will be returned. For example, with interval=5m, the maximum range of the request is 2016 * 5 minutes = 7 days. With interval=1h, the maximum range is 2016 * 1 hour = 84 days. Exceeding the maximum range will result in an error, which can be solved by reducing the date range specified in the request.
     *
     * You can specify the columns returned in the response using the "columns" query parameter. Columns will be returned in the order specified. The first column is timestamp and it cannot be reordered. By default, all columns will be returned.
     *
     * Some examples:
     * * Return "timestamp", "open", and "close" columns only: "?columns=open,close"
     * * Return "timestamp" and "volume" column only: "?columns=volume"
     *
     * You can specify the sort order of data points in the response using the ?order query parameter. Supported values are "asc" and "desc".
     *
     * You can specify the format of the response using the "format" query parameter. Supported formats are "json" and "csv"
     */
    get: operations["Get Market timeseries"];
  };
}

export interface components {
  schemas: {
    HttpStatus400: {
      /** Current ISO 8601 timestamp on the server. */
      timestamp?: string;
      /** Internal error code generated or 400 if default. */
      error_code?: number;
      /** a corresponding error message for the code */
      error_message?: string;
      /** Number of milliseconds taken to generate this response */
      elapsed?: number;
    };
    HttpStatus401: {
      /** Current ISO 8601 timestamp on the server. */
      timestamp?: string;
      /** Internal error code generated or 401 if default. */
      error_code?: number;
      /** a corresponding error message for the code */
      error_message?: string;
      /** Number of milliseconds taken to generate this response */
      elapsed?: number;
    };
    HttpStatus403: {
      /** Current ISO 8601 timestamp on the server. */
      timestamp?: string;
      /** Internal error code generated or 403 if default. */
      error_code?: number;
      /** a corresponding error message for the code */
      error_message?: string;
      /** Number of milliseconds taken to generate this response */
      elapsed?: number;
    };
    HttpStatus404: {
      /** Current ISO 8601 timestamp on the server. */
      timestamp?: string;
      /** Internal error code generated or 404 if default. */
      error_code?: number;
      /** a corresponding error message for the code */
      error_message?: string;
      /** Number of milliseconds taken to generate this response */
      elapsed?: number;
    };
    HttpStatus429: {
      /** Current ISO 8601 timestamp on the server. */
      timestamp?: string;
      /** Internal error code generated or 429 if default. */
      error_code?: number;
      /** a corresponding error message for the code */
      error_message?: string;
      /** Number of milliseconds taken to generate this response */
      elapsed?: number;
    };
    HttpStatus500: {
      /** Current ISO 8601 timestamp on the server. */
      timestamp?: string;
      /** Internal error code matches HTTP Status code of 500. */
      error_code?: number;
      /** a corresponding error message for the code */
      error_message?: string;
      /** Number of milliseconds taken to generate this response */
      elapsed?: number;
    };
    ApiStatus: {
      /** Current timestamp (ISO 8601) on the server. */
      timestamp: string;
      /** Number of milliseconds taken to generate this response */
      elapsed?: number;
    } & {
      error_code: unknown;
      error_message: unknown;
      elapsted: unknown;
      credit_count: unknown;
    };
    GetAllMarketsResponse: {
      status?: components["schemas"]["ApiStatus"];
      data?: components["schemas"]["Market"][];
    };
    Market: {
      /** Market ID. Unique and will never change. */
      id?: string;
      /** Exchange ID */
      exchange_id?: string;
      /** Base Asset ID */
      base_asset_id?: string;
      /** Quote Asset ID */
      quote_asset_id?: string;
      /** Type of market (spot, future, etc.) */
      class?: string;
      /** Whether this market is excluded from Messari's VWAP methodology */
      excluded_from_price?: boolean;
      /** Name of the exhange */
      exchange_name?: string;
      /** Exchange slug */
      exchange_slug?: string;
      /** Base asset symbol */
      base_asset_symbol?: string;
      /** Quote asset symbol */
      quote_asset_symbol?: string;
      /** Concatenation of base asset and quote asset symbols */
      pair?: string;
      /** Market price in USD */
      price_usd?: number;
      /** 24h trading volume in USD */
      volume_last_24_hours?: number;
      /** deviation from asset VWAP (volume weighted average price) */
      deviation_from_vwap_percent?: number;
      /** The exact datetime of the last trade for this market */
      last_trade_at?: string;
    };
    GetAllAssetsResponse: {
      status?: components["schemas"]["ApiStatus"];
      data?: components["schemas"]["AssetWithMetricsAndProfile"][];
    };
    GetAllAssetsV2Response: {
      status?: components["schemas"]["ApiStatus"];
      data?: components["schemas"]["AssetWithMetricsAndProfileV2"][];
    };
    Asset: {
      /** Asset ID. Unique and will never change. */
      id?: string;
      /** The commonly accepted "symbol" for an asset. Not unique, and can change. */
      symbol?: string;
      /** Name of asset */
      name?: string;
      /** Web URL friendly shorthand slug, alternative to ID. Unique, but can change. */
      slug?: string;
    };
    AssetResponse: {
      status?: components["schemas"]["ApiStatus"];
      data?: components["schemas"]["Asset"];
    };
    AssetProfileResponse: {
      status?: components["schemas"]["ApiStatus"];
      data?: components["schemas"]["AssetProfile"];
    };
    AssetProfileV2Response: {
      status?: components["schemas"]["ApiStatus"];
      data?: components["schemas"]["AssetProfileV2"];
    };
    AssetMetricsResponse: {
      status?: components["schemas"]["ApiStatus"];
      data?: components["schemas"]["AssetMetrics"];
    };
    AssetMetricsMarketDataResponse: {
      status?: components["schemas"]["ApiStatus"];
      data?: components["schemas"]["AssetMetricsMarketData"];
    };
    BlockchainMetricsResponse: {
      status?: components["schemas"]["ApiStatus"];
      data?: components["schemas"]["BlockchainStats"];
    };
    MarketData: {
      /** Market price in USD */
      price_usd?: number;
      /** Market price in BTC */
      price_btc?: number;
      /** 24h trading volume in USD */
      volume_last_24_hours?: number;
      /** 24h "real" trading volume in USD, read more here: https://messari.io/article/messari-methodology */
      real_volume_last_24_hours?: number;
      /** 24h trading volume in USD */
      volume_last_24_hours_overstatement_multiple?: number;
      /** 24h percent change of USD-denominated price. If the return value is 1.23, it means 1.23%. */
      percent_change_usd_last_24_hours?: unknown;
      /** 24h percent change of BTC-denominated price. If the return value is 1.23, it means 1.23%. */
      percent_change_btc_last_24_hours?: unknown;
      ohlcv_last_1_hour?: {
        /** Opening price this hour */
        open?: number;
        /** Highest price this hour */
        high?: number;
        /** Lowest price this hour */
        low?: number;
        /** Latest price (same as price_usd in parent object) */
        close?: number;
        /** "Real" volume this hour, read more here: https://messari.io/article/messari-methodology */
        volume?: number;
      };
      ohlcv_last_24_hour?: {
        /** Opening price 24 hours ago */
        open?: number;
        /** Highest price in past 24 hours */
        high?: number;
        /** Lowest price in past 24 hours */
        low?: number;
        /** Latest price (same as price_usd in parent object) */
        close?: number;
        /** "Real" volume past 24 hours, read more here: https://messari.io/article/messari-methodology */
        volume?: number;
      };
    };
    AssetSupply: {
      /** The expected supply on Jan 1 2050 */
      y_2050?: number;
      /** The percentage of the Y2050 supply which has already been issued. */
      y_2050_percent_issued?: number;
      /** The expected supply 10 years from now */
      supply_yplus_10?: number;
      /** Tthe percent of the Y+10 supply that's currently liquid on the market today. */
      y_plus10_issued_percent?: number;
      /** Liquid Supply refers to tokens that exist on-chain, and which are not known to be encumbered by any contracts (programmatic or legal). Data is sourced by the Messari research team where available. */
      liquid?: number;
      /** Circulating Supply refers to tokens that exist on-chain, and which are not known to be encumbered by any contracts (programmatic or legal). */
      circulating?: number;
      /** Stock to Flow is calculated by taking the Liquid Supply today and dividing by the projected 12month increase in Liquid Supply. This is essentially the inverse of Current Inflation. The value is null for assets with fixed or decreasing Liquid Supply */
      stock_to_flow?: number;
    };
    AssetAllTimeHigh: {
      /** The highest hourly open of the asset in USD */
      price?: number;
      /** ISO8601 timestamp of the date which the asset reached its all time high. */
      at?: string;
      /** Days since the asset's recorded all time high */
      days_since?: number;
      /** Percent that the current */
      percent_down?: number;
    };
    AssetDeveloperActivity: {
      stars?: number | null;
      watchers?: number | null;
      commits_last_3_months?: number;
      commits_last_1_year?: number;
      lines_added_last_3_months?: number;
      lines_added_last_1_year?: number;
      lines_deleted_last_3_months?: number;
      lines_deleted_last_1_year?: number;
    };
    BlockchainStats24h: {
      transaction_volume?: number;
      nvt?: number;
      sum_of_fees?: number;
      median_tx_value?: number;
      median_tx_fee?: number;
      count_of_active_addresses?: number;
      count_of_tx?: number;
      count_of_payments?: number;
      new_issuance?: number;
      average_difficulty?: number;
      kilobytes_added?: number;
      count_of_blocks_added?: unknown;
      supply_moved_off_chain?: number;
    };
    BlockchainStats: {
      transaction_volume?: components["schemas"]["ArrayOfDateDouble"];
      nvt?: components["schemas"]["ArrayOfDateDouble"];
      mean_and_median_tx_values?: components["schemas"]["ArrayOfDateMeanMedian"];
      number_of_active_addresses?: components["schemas"]["ArrayOfDateInt"];
      number_of_tx?: components["schemas"]["ArrayOfDateInt"];
      number_of_payments?: components["schemas"]["ArrayOfDateInt"];
      new_issuance?: components["schemas"]["ArrayOfDateDouble"];
      fees?: components["schemas"]["ArrayOfDateDouble"];
      average_difficulty?: components["schemas"]["ArrayOfDateDouble"];
      kilobytes_added?: components["schemas"]["ArrayOfDateDouble"];
      number_of_blocks_added?: components["schemas"]["ArrayOfDateInt"];
      supply_moved_off_chain?: components["schemas"]["ArrayOfDateDouble"];
    };
    ArrayOfDateDouble: {
      date?: string;
      val?: number;
    }[];
    ArrayOfDateInt: {
      date?: string;
      val?: number;
    }[];
    ArrayOfDateMeanMedian: {
      date?: string;
      mean?: number;
      median?: number;
    }[];
    AssetWithMetricsAndProfile: {
      /** Asset ID. Unique and will never change. */
      id?: string;
      /** The commonly accepted "symbol" for an asset. Not unique, and can change. */
      symbol?: string;
      /** Name of asset */
      name?: string;
      /** Web URL friendly shorthand slug, alternative to ID. Unique, but can change. */
      slug?: string;
      profile?: components["schemas"]["AssetProfile"];
      metrics?: components["schemas"]["AssetMetrics"];
    };
    AssetWithMetricsAndProfileV2: {
      /** Asset ID. Unique and will never change. */
      id?: string;
      /** The commonly accepted "symbol" for an asset. Not unique, and can change. */
      symbol?: string;
      /** Name of asset */
      name?: string;
      /** Web URL friendly shorthand slug, alternative to ID. Unique, but can change. */
      slug?: string;
      profile?: components["schemas"]["AssetProfileV2"];
      metrics?: components["schemas"]["AssetMetrics"];
    };
    AssetProfileV2: {
      profile?: {
        /** General taxonomy (category & sector) and description of the asset, its background, issuing organization, milestones and regulatory details. */
        general?: {
          overview?: {
            /** Indicates if the asset is part of the Messari Registry, an open source disclosures database aiming to become a central repository for project information that can be freely accessed industry-wide */
            is_verified?: boolean;
            /** One-Sentence summary of the asset's purpose. */
            tagline?: string;
            /** Indicates the primary use-case or application of a cryptoasset network */
            category?: string;
            /** Indicate the specific solution(s) provided by a cryptoasset network. */
            sector?: string;
            /** Tags allow to group cryptoassets that share some similarities that fall outside of the general classification model. These can be features, specifications, fun facts, memes etc. */
            tags?: string;
            /** Brief description of a few lines summarizing the project. */
            project_details?: string;
            official_links?: components["schemas"]["Link"];
          };
          background?: {
            /** A longer description of one to two paragraphs summarizing the project, its goals, and its technology. */
            background_details?: string;
            /** Organization(s) responsible(s) for the initial issuance of the asset */
            issuing_organizations?: components["schemas"]["OrganizationLite"][];
          };
          roadmap?: {
            /** Name of the milstone. */
            title?: string;
            /** Past or expected date of completion of the milestone. */
            date?: unknown;
            /** Type of Milestone */
            type?: string;
            /** Details of the changes implied by the completion of this milestone. */
            details?: string;
          }[];
          regulation?: {
            /** Details on the past regulatory events concerning the asset. */
            regulatory_details?: string;
            /** The score reflects an independent analysis by the Crypto Rating Council, LLC and is intended as a tool to help members evaluate and weigh factors that may be relevant to the potential classification of a digital asset under federal securities laws. */
            sfar_score?: number;
            /** Analysis underpinning each score based on a limited review of factual information publicly available or otherwise made available to the Crypto Rating Council. */
            sfar_summary?: string;
          };
        };
        /** People or organizations working on the development of the project. */
        contributors?: {
          individuals?: components["schemas"]["PersonLite"][];
          organizations?: components["schemas"]["OrganizationLite"][];
        };
        /** People or organizations advising the project. */
        advisors?: {
          individuals?: components["schemas"]["PersonLite"][];
          organizations?: components["schemas"]["OrganizationLite"][];
        };
        /** Investors (organizations or business angels) that have invested into the asset. */
        investors?: {
          individuals?: components["schemas"]["PersonLite"][];
          organizations?: components["schemas"]["OrganizationLite"][];
        };
        /** Third-party projects (assets or organizations) that are part of the ecosystem of the asset (wallets, scalability solutions ...) */
        ecosystem?: {
          assets?: components["schemas"]["AssetLite"][];
          organizations?: components["schemas"]["OrganizationLite"][];
        };
        /** Details about the token economics, the launch, the fundraising rounds, the supply dynamics, the native treasury and the consensus mechanism of the asset. */
        economics?: {
          token?: {
            token_name?: string;
            /** Indicates the standard or network on which a the asset operates. */
            token_type?: string;
            /** Main block explorers or token trackers allowing to visualize the ledger history, including transactions, blocks and addresses. */
            block_explorers?: components["schemas"]["Link"];
            /** Indicates if other token(s) used by the protocol to operate. */
            multitoken?: components["schemas"]["AssetLite"][];
            /** Indicates how the token can be used in its network. */
            token_usage?: string;
            /** Qualitative outline of the token role in the network as well as the ways to store the token. */
            token_usage_details_and_wallets?: string;
          };
          launch?: {
            general?: {
              /** Classification of how the initial supply was created and distributed. */
              launch_style?: string;
              /** Brief description of the initial supply creation and distribution */
              launch_details?: string;
            };
            /** Key information on the asset fundraising rounds, including token sales, if any. */
            fundraising?: {
              sales_rounds?: components["schemas"]["FundraisingRound"];
              sales_documents?: components["schemas"]["Link"];
              sales_treasury_accounts?: components["schemas"]["Treasury"];
              treasury_policies?: components["schemas"]["Link"];
              projected_use_of_sales_proceeds?: {
                category?: string;
                amount_in_percentage?: number;
              }[];
            };
            /** Quantitative data on the initial supply creation and distribution. */
            initial_distribution?: {
              initial_supply?: number;
              initial_supply_repartition?: {
                allocated_to_investors_percentage?: number;
                allocated_to_organization_or_founders_percentage?: number;
                allocated_to_premined_rewards_or_airdrops_percentage?: number;
              };
              token_distribution_date?: unknown;
              genesis_block_date?: unknown;
            };
          };
          consensus_and_emission?: {
            supply?: {
              /** In-depth details about the asset's Liquid Supply dynamics. */
              supply_curve_details?: string;
              /** This defines the general monetary policy ruling the issuance of new coins for a given cryptoasset. Therefore it's an indication of the future evolution of the Outstanding Supply (supply visible on-chain) for a given cryptoasset. */
              general_emission_type?: string;
              /** This further defines the monetary policy ruling the issuance of new coins for a given cryptoasset. It gives a more precise picture of the future evolution of the Outstanding Supply for a given cryptoasset (supply visible on-Chain). */
              precise_emission_type?: string;
              /** Is the supply capped (maximum supply defined) or uncapped (no maximum supply). */
              is_capped_supply?: boolean;
              /** If the supply is capped, it indicates the maximum supply that will ever exist on-chain based on the current specifications. */
              max_supply?: number;
            };
            consensus?: {
              /** Details on the consensus mechanism such as difficulty adjustment mechanism for PoW assets, validation and delegation requirements for PoS & DPoS assets etc. */
              consensus_details?: string;
              /** General indication of the consensus type used by a given cryptoasset. */
              general_consensus_mechanism?: string;
              /** More detailed information on the precise consensus algorithm of each asset */
              precise_consensus_mechanism?: string;
              /** Targeted time interval between each block as defined by the protocol specifications. */
              targeted_block_time?: number;
              /** Rewards in native token granted by the protocol to produce a block. */
              block_reward?: number;
              /** This is the mining algorithm used by a given Proof-of-Work cryptoasset */
              mining_algorithm?: string;
              /** Expected date for the next halving based on Messari proprietary supply data. */
              next_halving_date?: unknown;
              /** Details on previous 51% attacks, in the case the network experienced such an attack in the past. */
              is_victim_of_51_percent_attack?: boolean;
            };
          };
          native_treasury?: {
            accounts?: components["schemas"]["NativeTreasury"];
            /** Details about the issuing organization's plan to distribue its remaining native token treasury. */
            treasury_usage_details?: string;
          };
        };
        /** Details on the technology, client repositories, developer tools, past audits, as well as known exploits and vulnerabilities experienced by the protocol. */
        technology?: {
          overview?: {
            /** Overview of the technological specifications and properties of the protocol. */
            technology_details?: string;
            client_repositories?: {
              name?: string;
              link?: string;
              license_type?: string;
            }[];
          };
          security?: {
            /** List of past technological audits realized by professional auditors. */
            audits?: {
              title?: string;
              date?: unknown;
              type?: string;
              details?: string;
            }[];
            /** List of known security exploits and vulnerabilities experiences by the project. */
            known_exploits_and_vulnerabilities?: {
              title?: string;
              date?: unknown;
              type?: string;
              details?: string;
            }[];
          };
        };
        /** Details on the off-chain and on-chain governance specifications of the asset, as well as the grant programs led by the issuing organization(s). */
        governance?: {
          governance_details?: string;
          /** Details on the on-chain governance model, if any. */
          onchain_governance?: {
            /** This classifies the mechanisms through which governance happens on-chain for a given cryptoasset. This classification was inspired by Odysseas Sclavounis and Nic Carter's Overview of Governance in Blockchains. */
            onchain_governance_type?: string;
            onchain_governance_details?: string;
            /** This indicates if the cryptoasset incorporates a decentralized treasury where a group of token holders can allocate funds through On-Chain Governance. */
            is_treasury_decentralized?: boolean;
          };
          /** Details on the Grant Programs, if any. */
          grants?: {
            funding_organizations?: components["schemas"]["OrganizationLite"][];
            grant_program_details?: string;
          }[];
        };
      };
    };
    AssetProfile: {
      /** Asset ID. Unique and will never change. */
      id?: string;
      /** The commonly accepted "symbol" for an asset. Not unique, and can change. */
      symbol?: string;
      /** Name of asset */
      name?: string;
      /** Web URL friendly shorthand slug, alternative to ID. Unique, but can change. */
      slug?: string;
      tagline?: string;
      overview?: string;
      background?: string;
      technology?: string;
      token_distribution?: {
        description?: string;
        sale_start?: string;
        sale_end?: string;
        initial_distribution?: number;
        current_supply?: number;
        max_supply?: number;
      };
      organizations?: components["schemas"]["Organization"][];
      people?: {
        founding_team?: components["schemas"]["Person"][];
        contributors?: components["schemas"]["Person"][];
        investors?: components["schemas"]["Person"][];
        advisors?: components["schemas"]["Person"][];
      }[];
      relevant_resources?: {
        name?: string;
        url?: string;
      }[];
    };
    Organization: {
      name?: string;
      founded_date?: string;
      governance?: string;
      legal_structure?: string;
      jurisdiction?: string;
      org_charter?: string;
      description?: string;
      people_count_estimate?: string;
    };
    Person: {
      first_name?: string;
      last_name?: string;
      description?: string;
      github?: string;
      linkedin?: string;
      medium?: string;
      twitter?: string;
    };
    AssetRoiStats: {
      percent_change_last_1_week?: number;
      percent_change_last_1_month?: number;
      percent_change_last_3_months?: number;
      percent_change_last_1_year?: number;
    };
    AssetMisc: {
      asset_age_days?: number;
      vladimir_club_cost?: number;
      categories?: string[];
      sector?: string[];
    };
    AssetMetrics: {
      /** Asset ID. Unique and will never change. */
      id?: string;
      /** The commonly accepted "symbol" for an asset. Not unique, and can change. */
      symbol?: string;
      /** Name of asset */
      name?: string;
      /** Web URL friendly shorthand slug, alternative to ID. Unique, but can change. */
      slug?: string;
      market_data?: components["schemas"]["MarketData"];
      supply?: components["schemas"]["AssetSupply"];
      blockchain_stats_24_hours?: components["schemas"]["BlockchainStats24h"];
      all_time_high?: components["schemas"]["AssetAllTimeHigh"];
      developer_activity?: components["schemas"]["AssetDeveloperActivity"];
      roi_data?: components["schemas"]["AssetRoiStats"];
      misc_data?: components["schemas"]["AssetMisc"];
    };
    AssetMetricsMarketData: {
      /** Asset ID. Unique and will never change. */
      id?: string;
      /** The commonly accepted "symbol" for an asset. Not unique, and can change. */
      symbol?: string;
      /** Name of asset */
      name?: string;
      /** Web URL friendly shorthand slug, alternative to ID. Unique, but can change. */
      slug?: string;
      market_data?: components["schemas"]["MarketData"];
    };
    AssetLite: {
      id?: string;
      name?: string;
    };
    FundraisingRound: {
      title?: string;
      start_date?: unknown;
      type?: string;
      details?: string;
      end_date?: unknown;
      native_tokens_allocated?: number;
      asset_collected?: string;
      price_per_token_in_asset?: number;
      equivalent_price_per_token_in_USD?: number;
      amount_collected_in_asset?: number;
      amount_collected_in_USD?: number;
      is_kyc_required?: boolean;
      restricted_jurisdictions?: string[];
    }[];
    Link: {
      name?: string;
      link?: string;
    }[];
    OrganizationLite: {
      slug?: string;
      name?: string;
      logo?: string;
      description?: string;
    };
    PersonLite: {
      slug?: string;
      first_name?: string;
      last_name?: string;
      title?: string;
      description?: string;
      avatar_url?: string;
    };
    NativeTreasury: {
      account_type?: string;
      addresses?: components["schemas"]["Link"];
    }[];
    Treasury: {
      account_type?: string;
      asset_held?: components["schemas"]["AssetLite"];
      addresses?: components["schemas"]["Link"];
      security?: string;
    }[];
    GetAllNewsResponse: {
      status?: components["schemas"]["ApiStatus"];
      data?: components["schemas"]["News"][];
    };
    GetNewsResponse: {
      status?: components["schemas"]["ApiStatus"];
      data?: components["schemas"]["News"];
    };
    ListAssetMetricsResponse: {
      status?: components["schemas"]["ApiStatus"];
      data?: string[];
    };
    AssetTimeseriesParameters: {
      assetKey?: string;
      assetID?: string;
      start?: string;
      end?: string;
      interval?: string;
      order?: string;
      format?: string;
    };
    MarketTimeseriesParameters: {
      marketKey?: string;
      marketID?: string;
      start?: string;
      end?: string;
      interval?: string;
      order?: string;
      format?: string;
    };
    TimeseriesSchema: {
      metric_id?: string;
      description?: string;
      category?: string;
      values_schema?: components["schemas"]["TimeseriesValuesSchema"];
      minimum_interval?: string;
      first_available?: unknown;
      last_available?: unknown;
    };
    TimeseriesValuesSchema: {
      /** The name of the column */
      name?: string;
      /** A description of the column. */
      description?: string;
    }[];
    TimeseriesValues: number[][];
    GetAssetTimeseriesResponse: {
      parameters?: components["schemas"]["AssetTimeseriesParameters"];
      schema?: components["schemas"]["TimeseriesSchema"];
      values?: components["schemas"]["TimeseriesValues"];
    };
    GetMarketTimeseriesResponse: {
      parameters?: components["schemas"]["MarketTimeseriesParameters"];
      schema?: components["schemas"]["TimeseriesSchema"];
      values?: components["schemas"]["TimeseriesValues"];
    };
    News: {
      id?: string;
      title?: string;
      content?: string;
      references?: components["schemas"]["Reference"][];
      reference_title?: string;
      published_at?: string;
      author?: {
        name?: string;
      };
      tags?: string[];
      url?: string;
    };
    Reference: {
      name?: string;
      url?: string;
    };
  };
}

export interface operations {
  /** Get the list of all exchanges and pairs that our WebSocket-based market real-time market data API supports. */
  "Get all Markets": {
    parameters: {
      query: {
        /** Page number, starts at 1. Increment to paginate through results (until result is empty array) */
        page?: number;
        /** pare down the returned fields (comma `,` separated, drill down with a slash `/`) */
        fields?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        content: {
          "application/json": components["schemas"]["GetAllMarketsResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["HttpStatus400"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["HttpStatus401"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["HttpStatus403"];
        };
      };
      /** Too Many Requests */
      429: {
        content: {
          "application/json": components["schemas"]["HttpStatus429"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["HttpStatus500"];
        };
      };
    };
  };
  /**
   * Get the paginated list of all assets *and* their metrics and profiles.
   *
   * Some example query param usage:
   *
   * * optionally use `?fields` query param to pare down the returned fields (because this endpoint returns a lot of data)
   *   * [`data.messari.io/api/v1/assets?fields=id,slug,symbol,metrics/market_data/price_usd`](https://data.messari.io/api/v1/assets?fields=id,slug,symbol,metrics/market_data/price_usd)
   * * optionally use `?with-metrics` or `?with-profiles` query parameters to filter the list
   *   * [`data.messari.io/api/v1/assets?with-metrics`](https://data.messari.io/api/v1/assets?with-metrics)
   *   * [`data.messari.io/api/v1/assets?with-profiles`](https://data.messari.io/api/v1/assets?with-profiles)
   *   * [`data.messari.io/api/v1/assets?with-metrics&with-profiles`](https://data.messari.io/api/v1/assets?with-metrics&with-profiles)
   */
  "Get all Assets": {
    parameters: {
      query: {
        /** Page number, starts at 1. Increment to paginate through results (until result is empty array) */
        page?: number;
        /** default sort is "marketcap desc", but the only valid value for this query param is "id" which translates to "id asc", which is useful for a stable sort while paginating */
        sort?: string;
        /** default is 20, max is 500 */
        limit?: number;
        /** pare down the returned fields (comma `,` separated, drill down with a slash `/`) */
        fields?: string;
        /** existence of this query param filters assets to those with quantitative data */
        "with-metrics"?: unknown;
        /** existence of this query param filters assets to those with qualitative data */
        "with-profiles"?: unknown;
      };
    };
    responses: {
      /** Successful */
      200: {
        content: {
          "application/json": components["schemas"]["GetAllAssetsResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["HttpStatus400"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["HttpStatus401"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["HttpStatus403"];
        };
      };
      /** Too Many Requests */
      429: {
        content: {
          "application/json": components["schemas"]["HttpStatus429"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["HttpStatus500"];
        };
      };
    };
  };
  /**
   * Get the paginated list of all assets *and* their metrics and profiles.
   *
   * Some example query param usage:
   *
   * * optionally use `?fields` query param to pare down the returned fields (because this endpoint returns a lot of data)
   *   * [`data.messari.io/api/v2/assets?fields=id,slug,symbol,metrics/market_data/price_usd`](https://data.messari.io/api/v2/assets?fields=id,slug,symbol,metrics/market_data/price_usd)
   * * optionally use `?with-metrics` or `?with-profiles` query parameters to filter the list
   *   * [`data.messari.io/api/v2/assets?with-metrics`](https://data.messari.io/api/v2/assets?with-metrics)
   *   * [`data.messari.io/api/v2/assets?with-profiles`](https://data.messari.io/api/v2/assets?with-profiles)
   *   * [`data.messari.io/api/v2/assets?with-metrics&with-profiles`](https://data.messari.io/api/v2/assets?with-metrics&with-profiles)
   */
  "Get all Assets V2": {
    parameters: {
      query: {
        /** Page number, starts at 1. Increment to paginate through results (until result is empty array) */
        page?: number;
        /** default sort is "marketcap desc", but the only valid value for this query param is "id" which translates to "id asc", which is useful for a stable sort while paginating */
        sort?: string;
        /** default is 20, max is 500 */
        limit?: number;
        /** pare down the returned fields (comma `,` separated, drill down with a slash `/`) */
        fields?: string;
        /** existence of this query param filters assets to those with quantitative data */
        "with-metrics"?: unknown;
        /** existence of this query param filters assets to those with qualitative data */
        "with-profiles"?: unknown;
      };
    };
    responses: {
      /** Successful */
      200: {
        content: {
          "application/json": components["schemas"]["GetAllAssetsV2Response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["HttpStatus400"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["HttpStatus401"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["HttpStatus403"];
        };
      };
      /** Too Many Requests */
      429: {
        content: {
          "application/json": components["schemas"]["HttpStatus429"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["HttpStatus500"];
        };
      };
    };
  };
  /** Get basic metadata for an asset. */
  "Get Asset": {
    parameters: {
      path: {
        /** This "key" can be the asset's ID (unique), slug (unique), or symbol (non-unique) */
        assetKey: string;
      };
      query: {
        /** pare down the returned fields (comma `,` separated, drill down with a slash `/`) */
        fields?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        content: {
          "application/json": components["schemas"]["AssetResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["HttpStatus400"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["HttpStatus401"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["HttpStatus403"];
        };
      };
      /** NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["HttpStatus404"];
        };
      };
      /** Too Many Requests */
      429: {
        content: {
          "application/json": components["schemas"]["HttpStatus429"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["HttpStatus500"];
        };
      };
    };
  };
  /** Get all of our qualitative information for an asset. */
  "Get Asset Profile V1": {
    parameters: {
      path: {
        /** This "key" can be the asset's ID (unique), slug (unique), or symbol (non-unique) */
        assetKey: string;
      };
      query: {
        /** pare down the returned fields (comma `,` separated, drill down with a slash `/`) */
        fields?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        content: {
          "application/json": components["schemas"]["AssetProfileResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["HttpStatus400"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["HttpStatus401"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["HttpStatus403"];
        };
      };
      /** NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["HttpStatus404"];
        };
      };
      /** Too Many Requests */
      429: {
        content: {
          "application/json": components["schemas"]["HttpStatus429"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["HttpStatus500"];
        };
      };
    };
  };
  /**
   * Get all of our qualitative information for an asset.
   *
   * Some example query param usage:
   *
   * * optionally use `?fields` query param to pare down the returned fields
   *   * [`data.messari.io/api/v2/assets/eth/profile?fields=id,name,profile/general/overview/is_verified`](https://data.messari.io/api/v2/assets/eth/profile?fields=id,name,profile/general/overview/is_verified)
   * * optionally use `?as-markdown` query param to get content in markdown format
   *   * [`data.messari.io/api/v2/assets/btc/profile?as-markdown`](https://data.messari.io/api/v2/assets/btc/profile?as-markdown)
   */
  "Get Asset Profile V2": {
    parameters: {
      path: {
        /** This "key" can be the asset's ID (unique), slug (unique), or symbol (non-unique) */
        assetKey: string;
      };
      query: {
        /** pare down the returned fields (comma `,` separated, drill down with a slash `/`) */
        fields?: string;
        /** formatting (other than HTML links) is hidden. Use this query param to return content with markdown syntax */
        "as-markdown"?: unknown;
      };
    };
    responses: {
      /** Successful */
      200: {
        content: {
          "application/json": components["schemas"]["AssetProfileV2Response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["HttpStatus400"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["HttpStatus401"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["HttpStatus403"];
        };
      };
      /** NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["HttpStatus404"];
        };
      };
      /** Too Many Requests */
      429: {
        content: {
          "application/json": components["schemas"]["HttpStatus429"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["HttpStatus500"];
        };
      };
    };
  };
  /** Get all of our quantitative metrics for an asset. */
  "Get Asset Metrics": {
    parameters: {
      path: {
        /** This "key" can be the asset's ID (unique), slug (unique), or symbol (non-unique) */
        assetKey: string;
      };
      query: {
        /** pare down the returned fields (comma `,` separated, drill down with a slash `/`) */
        fields?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        content: {
          "application/json": components["schemas"]["AssetMetricsResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["HttpStatus400"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["HttpStatus401"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["HttpStatus403"];
        };
      };
      /** NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["HttpStatus404"];
        };
      };
      /** Too Many Requests */
      429: {
        content: {
          "application/json": components["schemas"]["HttpStatus429"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["HttpStatus500"];
        };
      };
    };
  };
  /** Get the latest market data for an asset. This data is also included in the metrics endpoint, but if all you need is market-data, use this. */
  "Get Asset Market Data": {
    parameters: {
      path: {
        /** This "key" can be the asset's ID (unique), slug (unique), or symbol (non-unique) */
        assetKey: string;
      };
      query: {
        /** pare down the returned fields (comma `,` separated, drill down with a slash `/`) */
        fields?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        content: {
          "application/json": components["schemas"]["AssetMetricsMarketDataResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["HttpStatus400"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["HttpStatus401"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["HttpStatus403"];
        };
      };
      /** NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["HttpStatus404"];
        };
      };
      /** Too Many Requests */
      429: {
        content: {
          "application/json": components["schemas"]["HttpStatus429"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["HttpStatus500"];
        };
      };
    };
  };
  /**
   * Get the latest (paginated) news and analysis for all assets.
   *
   * Some example query param usage:
   *
   * * optionally use `?fields` query param to pare down the returned fields
   *   * [`data.messari.io/api/v1/news?fields=title,content,author/name`](https://data.messari.io/api/v1/news?fields=title,content,author/name)
   * * optionally use `?as-markdown` to get news formatted in markdown
   *   * [data.messari.io/api/v1/news?as-markdown](https://data.messari.io/api/v1/news?as-markdown)
   */
  "Get all News": {
    parameters: {
      query: {
        /** Page number, starts at 1. Increment to paginate through results (until result is empty array) */
        page?: number;
        /** pare down the returned fields (comma `,` separated, drill down with a slash `/`) */
        fields?: string;
        /** formatting (other than HTML links) is hidden. Use this query param to return content with markdown syntax */
        "as-markdown"?: unknown;
      };
    };
    responses: {
      /** Successful */
      200: {
        content: {
          "application/json": components["schemas"]["GetAllNewsResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["HttpStatus400"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["HttpStatus401"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["HttpStatus403"];
        };
      };
      /** Too Many Requests */
      429: {
        content: {
          "application/json": components["schemas"]["HttpStatus429"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["HttpStatus500"];
        };
      };
    };
  };
  /**
   * Get the latest (paginated) news and analysis for an asset.
   *
   * Some example query param usage:
   *
   * * optionally use `?fields` query param to pare down the returned fields
   *   * [`data.messari.io/api/v1/news?fields=title,content,author/name`](https://data.messari.io/api/v1/news?fields=title,content,author/name)
   * * optionally use `?as-markdown` to get news formatted in markdown
   *   * [data.messari.io/api/v1/news/btc?as-markdown](https://data.messari.io/api/v1/news/btc?as-markdown)
   */
  "Get News for Asset": {
    parameters: {
      path: {
        /** This "key" can be the asset's ID (unique), slug (unique), or symbol (non-unique) */
        assetKey: string;
      };
      query: {
        /** Page number, starts at 1. Increment to paginate through results (until result is empty array) */
        page?: number;
        /** pare down the returned fields (comma `,` separated, drill down with a slash `/`) */
        fields?: string;
        /** formatting (other than HTML links) is hidden. Use this query param to return content with markdown syntax */
        "as-markdown"?: unknown;
      };
    };
    responses: {
      /** Successful */
      200: {
        content: {
          "application/json": components["schemas"]["GetNewsResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["HttpStatus400"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["HttpStatus401"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["HttpStatus403"];
        };
      };
      /** NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["HttpStatus404"];
        };
      };
      /** Too Many Requests */
      429: {
        content: {
          "application/json": components["schemas"]["HttpStatus429"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["HttpStatus500"];
        };
      };
    };
  };
  /** Lists all of the available timeseries metric IDs for assets. */
  "List asset timeseries metric IDs": {
    parameters: {};
    responses: {
      /** Successful */
      200: {
        content: {
          "application/json": components["schemas"]["ListAssetMetricsResponse"];
        };
      };
    };
  };
  /**
   * Retrieve historical timeseries data for an asset.
   *
   * metricID specifies which timeseries will be returned. The list of supported metric ids can be found at https://data.messari.io/api/v1/assets/metrics.
   *
   * You can specify the range of what points will be returned using (begin, end, start, before, after) query parameters. All range parameters are inclusive of the specified date.
   *
   * Some examples:
   * * Return data between 2019-01-01 to 2019-01-07: "?start=2020-01-01&end=2020-01-07"
   * * Return data after 2020-01-01: "?after=2020-01-01"
   * * Return data before 2020-01-01: "?before=2020"
   *
   * You can specify the interval that the points will be returned in using the "interval" query parameter. Supported intervals are ["5m", "15m", "30m", "1h", "1d", "1w"] for 5 minute, 15 minute, 30 minute. 1 hour, 1 day, and 1 week respectively. **Anything under 1 day requires an enterprise subscription, please email enterprise@messari.io.**
   *
   * A default start date, end date, and/or interval will be provided for you if not specified.
   *
   * For any given interval, at most 2016 points will be returned. For example, with interval=5m, the maximum range of the request is 2016 * 5 minutes = 7 days. With interval=1h, the maximum range is 2016 * 1 hour = 84 days. Exceeding the maximum range will result in an error, which can be solved by reducing the date range specified in the request.
   *
   * You can specify the sort order of data points in the response using the ?order query parameter. Supported values are "asc" and "desc".
   *
   * You can specify the format of the response using the "format" query parameter. Supported formats are "json" and "csv"
   */
  "Get Asset timeseries": {
    parameters: {
      path: {
        /** This "key" can be the asset's ID (unique), slug (unique), or symbol (non-unique) */
        assetKey: string;
        /** The metricID is a unique identifier which determines which columns are returned by time-series endpoints. For a list of valid metric ids, check the API response at https://data.messari.io/api/v1/assets/metrics. */
        metricID: string;
      };
      query: {
        /** The "start" query parameter can be used to set the date that points are returned after. */
        start?: string;
        /** The "end" query parameter can be used to set the date after which no more points will be returned. */
        end?: string;
        /** Defines what interval the resulting points will be returned in. */
        interval?: "1m" | "5m" | "15m" | "30m" | "1h" | "1d" | "1w";
        /** A comma separated list of strings that controls which columns will be returned and in what order. */
        columns?: string;
        /** Order controls whether points in the response are returned in ascending or descending order. */
        order?: "asc" | "desc";
        /** Specify format = csv to download data as CSV. */
        format?: "csv" | "json";
        /** Specify timestamp-format=rfc3339 for timestamps in the format "2016-11-01T20:44:39Z" */
        "timestamp-format"?: "unix-millisecond" | "unix-second" | "rfc3339";
      };
    };
  };
  /**
   * Retrieve historical timeseries data for a market.
   *
   * metricID specifies which timeseries will be returned. Supported metric IDs are "price", "price-usd", and "real-vol".
   *
   * You can specify the range of what points will be returned using (begin, end, start, before, after) query parameters. All range parameters are inclusive of the specified date.
   *
   * Some examples:
   * * Return data between 2019-01-01 to 2019-01-07: "?start=2020-01-01&end=2020-01-07"
   * * Return data after 2020-01-01: "?after=2020-01-01"
   * * Return data before 2020-01-01: "?before=2020"
   *
   * You can specify the interval that the points will be returned in using the "interval" query parameter. Supported intervals are ["5m", "15m", "30m", "1h", "1d", "1w"] for 5 minute, 15 minute, 30 minute. 1 hour, 1 day, and 1 week respectively. **Anything under 1 day requires an enterprise subscription, please email enterprise@messari.io.**
   *
   * A default start date, end date, and/or interval will be provided for you if not specified.
   *
   * For any given interval, at most 2016 points will be returned. For example, with interval=5m, the maximum range of the request is 2016 * 5 minutes = 7 days. With interval=1h, the maximum range is 2016 * 1 hour = 84 days. Exceeding the maximum range will result in an error, which can be solved by reducing the date range specified in the request.
   *
   * You can specify the columns returned in the response using the "columns" query parameter. Columns will be returned in the order specified. The first column is timestamp and it cannot be reordered. By default, all columns will be returned.
   *
   * Some examples:
   * * Return "timestamp", "open", and "close" columns only: "?columns=open,close"
   * * Return "timestamp" and "volume" column only: "?columns=volume"
   *
   * You can specify the sort order of data points in the response using the ?order query parameter. Supported values are "asc" and "desc".
   *
   * You can specify the format of the response using the "format" query parameter. Supported formats are "json" and "csv"
   */
  "Get Market timeseries": {
    parameters: {
      path: {
        /** This key can be the market's ID (unique), or a string in the form of exchangeSlug-baseAssetSymbol-quoteAssetSymbol */
        marketKey: string;
        /** The metricID is a unique identifier which determines which columns are returned by time-series endpoints. For a list of valid metric ids, check the API response at https://data.messari.io/api/v1/assets/metrics. */
        metricID: string;
      };
      query: {
        /** The "start" query parameter can be used to set the date that points are returned after. */
        start?: string;
        /** The "end" query parameter can be used to set the date after which no more points will be returned. */
        end?: string;
        /** Defines what interval the resulting points will be returned in. */
        interval?: "1m" | "5m" | "15m" | "30m" | "1h" | "1d" | "1w";
        /** A comma separated list of strings that controls which columns will be returned and in what order. */
        columns?: string;
        /** Order controls whether points in the response are returned in ascending or descending order. */
        order?: "asc" | "desc";
        /** Specify format = csv to download data as CSV. */
        format?: "csv" | "json";
        /** Specify timestamp-format=rfc3339 for timestamps in the format "2016-11-01T20:44:39Z" */
        "timestamp-format"?: "unix-millisecond" | "unix-second" | "rfc3339";
      };
    };
  };
}

export interface external {}
